syntax = "proto3";

package auth;

option go_package = "alexblacknn.sso.v1;ssov1";

// Auth is service for managing permissions and roles.
service Auth {
  // Register registers a new user.
  rpc Register (RegisterRequest) returns (RegisterResponse);
  // Login logs in a user and returns an auth and refresh token.
  rpc Login (LoginRequest) returns (LoginResponse);
  // Refresh renews access and refresh tokens
  rpc Refresh (RefreshRequest) returns (RefreshResponse);
  // IsAdmin checks whether a user is an admin.
  rpc IsAdmin (IsAdminRequest) returns (IsAdminResponse);
  // Logout revokes current user's access and refresh tokens
  rpc Logout (LogoutRequest) returns (LogoutResponse);
  // Validate validates access token
  rpc Validate (ValidateRequest) returns (ValidateResponse);
}

message IsAdminRequest {
  int64 user_id = 1; // User ID to validate.
}

message IsAdminResponse {
  bool is_admin = 1;  // Indicates whether the user is an admin.
}

message RegisterRequest {
  string email = 1; // Email of the user to register.
  string password = 2; // Password of the user to register.
}

message RegisterResponse {
  int64 user_id = 1; // User ID of the registered user.
}

message LoginRequest {
  string email = 1; // Email of the user to login.
  string password = 2; // Password of the user to login.
}

message LoginResponse {
  string access_token = 1; // Access token of the logged in user.
  string refresh_token = 2; // Refresh token of the logged in user.
}

message RefreshRequest {
  string refresh_token = 1; // Refresh token of the logged in user.
}

message RefreshResponse {
  string access_token = 1; // Access token of the logged in user.
  string refresh_token = 2; // Refresh token of the logged in user.
}


message LogoutRequest {
  string token = 1; // Auth token of the user to logout.
}

message LogoutResponse {
  bool success = 1; // Indicates whether the logout was successful.
}

message ValidateRequest {
  string token = 1; // token of the user to validate.
}

message ValidateResponse {
  bool success = 1; // Indicates whether the token is correct.
}

